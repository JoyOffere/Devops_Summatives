name: Infrastructure Pipeline

on:
  push:
    branches: [ main ]
    paths: 
      - 'terraform-azure-containerapp/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform-azure-containerapp/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: 1.5.0
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  # Terraform validation and formatting
  terraform-validate:
    name: Terraform Validate & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive terraform-azure-containerapp/
        continue-on-error: true

      - name: Terraform Init and Validate - Staging
        working-directory: terraform-azure-containerapp/environments/staging
        run: |
          terraform init -backend=false
          terraform validate

      - name: Terraform Init and Validate - Production
        working-directory: terraform-azure-containerapp/environments/production
        run: |
          terraform init -backend=false
          terraform validate

  # Security scanning for Terraform
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform-azure-containerapp/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-terraform.sarif

      - name: TFSec Security Scanner
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform-azure-containerapp/
          format: sarif
          output: tfsec-terraform.sarif

      - name: Upload TFSec results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: tfsec-terraform.sarif

      - name: Terraform Compliance
        run: |
          pip install terraform-compliance
          terraform-compliance -f terraform-azure-containerapp/compliance/ -p terraform-azure-containerapp/
        continue-on-error: true

  # Plan for staging
  terraform-plan-staging:
    name: Terraform Plan - Staging
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform-azure-containerapp/environments/staging
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform-azure-containerapp/environments/staging
        run: |
          terraform plan -out=staging.tfplan -detailed-exitcode
        continue-on-error: true
        id: plan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: staging-tfplan
          path: terraform-azure-containerapp/environments/staging/staging.tfplan

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Plan - Staging ðŸ“‹
            
            **Plan Status:** ${{ steps.plan.outcome }}
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # Plan for production
  terraform-plan-production:
    name: Terraform Plan - Production
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform-azure-containerapp/environments/production
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform-azure-containerapp/environments/production
        run: |
          terraform plan -out=production.tfplan -detailed-exitcode
        id: plan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: production-tfplan
          path: terraform-azure-containerapp/environments/production/production.tfplan

  # Apply to staging
  terraform-apply-staging:
    name: Terraform Apply - Staging
    runs-on: ubuntu-latest
    needs: [terraform-plan-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: staging-tfplan
          path: terraform-azure-containerapp/environments/staging/

      - name: Terraform Init
        working-directory: terraform-azure-containerapp/environments/staging
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform-azure-containerapp/environments/staging
        run: terraform apply -auto-approve staging.tfplan

      - name: Get Terraform Outputs
        working-directory: terraform-azure-containerapp/environments/staging
        run: |
          echo "## Staging Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | "- **\(.key):** \(.value.value)"' >> $GITHUB_STEP_SUMMARY

  # Apply to production
  terraform-apply-production:
    name: Terraform Apply - Production
    runs-on: ubuntu-latest
    needs: [terraform-plan-production, terraform-apply-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: production-tfplan
          path: terraform-azure-containerapp/environments/production/

      - name: Terraform Init
        working-directory: terraform-azure-containerapp/environments/production
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform-azure-containerapp/environments/production
        run: terraform apply -auto-approve production.tfplan

      - name: Get Terraform Outputs
        working-directory: terraform-azure-containerapp/environments/production
        run: |
          echo "## Production Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | "- **\(.key):** \(.value.value)"' >> $GITHUB_STEP_SUMMARY

  # Destroy infrastructure (manual trigger only)
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform-azure-containerapp/environments/${{ github.event.inputs.environment }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: terraform-azure-containerapp/environments/${{ github.event.inputs.environment }}
        run: terraform destroy -auto-approve

  # Drift detection
  terraform-drift-detection:
    name: Terraform Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform-azure-containerapp/environments/${{ matrix.environment }}
        run: terraform init

      - name: Terraform Plan (Drift Check)
        working-directory: terraform-azure-containerapp/environments/${{ matrix.environment }}
        run: |
          terraform plan -detailed-exitcode -no-color
        continue-on-error: true
        id: drift

      - name: Create Issue for Drift
        if: steps.drift.outputs.exitcode == 2
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Infrastructure Drift Detected - ${{ matrix.environment }}`,
              body: `
              ## ðŸš¨ Infrastructure Drift Detected
              
              **Environment:** ${{ matrix.environment }}
              **Detected:** ${new Date().toISOString()}
              
              Terraform plan shows differences between the actual infrastructure and the desired state.
              
              Please review and address the drift:
              1. Check if manual changes were made to resources
              2. Update Terraform configuration if needed
              3. Run terraform apply to align infrastructure
              
              **Plan Output:**
              \`\`\`
              ${{ steps.drift.outputs.stdout }}
              \`\`\`
              `,
              labels: ['infrastructure', 'drift', '${{ matrix.environment }}']
            });
