name: Security and Compliance Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM
  pull_request:
    branches: [ main, develop  ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./${{ matrix.app }}
        run: npm ci

      - name: Run npm audit
        working-directory: ./${{ matrix.app }}
        run: |
          npm audit --audit-level=moderate --production
          npm audit fix --force || true

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'scholardorm-${{ matrix.app }}'
          path: './${{ matrix.app }}'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload Dependency Check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-${{ matrix.app }}
          path: reports/

  # Infrastructure security scanning
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform-azure-containerapp/
          framework: terraform
          output_format: cli,sarif
          output_file_path: checkov-report.sarif
          check: CKV_AZURE_*
          skip_check: CKV_AZURE_4,CKV_AZURE_5  # Skip if needed

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-report.sarif

      - name: TFSec Analysis
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform-azure-containerapp/
          format: sarif
          output: tfsec-results.sarif

      - name: Upload TFSec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif

  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          file: ./${{ matrix.app }}/Dockerfile
          push: false
          load: true
          tags: ${{ matrix.app }}:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_API_URL=https://scholardorm-backend-staging.gentlemeadow-49027184.eastus.azurecontainerapps.io/api

      - name: Verify Docker image exists
        run: |
          echo "Listing Docker images:"
          docker images
          echo "Checking for image: ${{ matrix.app }}:security-scan"
          docker inspect ${{ matrix.app }}:security-scan || exit 1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.app }}:security-scan
          format: 'sarif'
          output: 'trivy-${{ matrix.app }}.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.app }}.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: ${{ matrix.app }}:security-scan
          fail-build: false
          severity-cutoff: high
        continue-on-error: true

      - name: Docker Scout CVE scanning
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ matrix.app }}:security-scan
          sarif-file: scout-${{ matrix.app }}.sarif
        continue-on-error: true

      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: scout-${{ matrix.app }}.sarif

  # Compliance and security posture
  compliance-check:
    name: Compliance and Security Posture
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure Security Center Assessment
        run: |
          # Get security center assessments
          az security assessment list --query "[?status.code=='Unhealthy']" --output table

      - name: Azure Policy Compliance Check
        run: |
          # Check policy compliance for staging
          az policy state list --resource-group rg-containerapp-staging --query "[?complianceState=='NonCompliant']" --output table
          
          # Check policy compliance for production
          az policy state list --resource-group scholardorm-production-rg --query "[?complianceState=='NonCompliant']" --output table

      - name: Generate Security Report
        run: |
          echo "# Security Compliance Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Azure Security Center Findings" >> security-report.md
          az security assessment list --query "[?status.code=='Unhealthy'].{Name:displayName,Status:status.code,Severity:status.severity}" --output table >> security-report.md
          echo "" >> security-report.md
          echo "## Policy Compliance" >> security-report.md
          az policy state list --resource-group rg-containerapp-staging --query "[?complianceState=='NonCompliant'].{Policy:policyDefinitionName,Resource:resourceId}" --output table >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: security-report.md

  # Secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # Generate security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, infrastructure-security, container-security, compliance-check, secret-scan]
    if: always()
    steps:
      - name: Generate Security Summary
        run: |
          echo "# 🛡️ Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-summary.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> security-summary.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-summary.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });